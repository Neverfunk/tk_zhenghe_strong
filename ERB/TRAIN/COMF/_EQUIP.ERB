;継続状態や装着物に関する処理

;-------------------------------------------------
;キャラARG:0がコマンド番号ARG:1～ARG:10に対応する継続状態のプレイヤーまたはターゲットなら1を返す関数
;-------------------------------------------------
@IS_EQUIP(ARG:0, ARG:1, ARG:2 = -1, ARG:3 = -1, ARG:4 = -1, ARG:5 = -1, ARG:6 = -1, ARG:7 = -1, ARG:8 = -1, ARG:9 = -1, ARG:10 = -1, ARG:11 = -1, ARG:12 = -1, ARG:13 = -1)
#FUNCTION
FOR LOCAL:0, 0, MEQUIP_NUM
	IF GROUPMATCH(MEQUIP:(LOCAL:0), ARG:1, ARG:2, ARG:3, ARG:4, ARG:5, ARG:6, ARG:7, ARG:8, ARG:9, ARG:10, ARG:11, ARG:12, ARG:13)
		FOR LOCAL:1, 0, MEQUIP_PLAYER_NUM:(LOCAL:0)
			IF MEQUIP_PLAYER:(LOCAL:0):(LOCAL:1) == ARG:0
				RETURNF 1
			ENDIF
		NEXT
		FOR LOCAL:1, 0, MEQUIP_TARGET_NUM:(LOCAL:0)
			IF MEQUIP_TARGET:(LOCAL:0):(LOCAL:1) == ARG:0
				RETURNF 1
			ENDIF
		NEXT
	ENDIF
NEXT
RETURNF 0

;-------------------------------------------------
;キャラARG:0がコマンド番号ARG:1～ARG:8に対応する継続状態のプレイヤーならば1を返す関数
;-------------------------------------------------
@IS_EQUIP_PLAYER(ARG:0, ARG:1, ARG:2 = -1, ARG:3 = -1, ARG:4 = -1, ARG:5 = -1, ARG:6 = -1, ARG:7 = -1, ARG:8 = -1, ARG:9 = -1, ARG:10 = -1, ARG:11 = -1, ARG:12 = -1, ARG:13 = -1)
#FUNCTION
FOR LOCAL:0, 0, MEQUIP_NUM
	IF GROUPMATCH(MEQUIP:(LOCAL:0), ARG:1, ARG:2, ARG:3, ARG:4, ARG:5, ARG:6, ARG:7, ARG:8, ARG:9, ARG:10, ARG:11, ARG:12, ARG:13)
		FOR LOCAL:1, 0, MEQUIP_PLAYER_NUM:(LOCAL:0)
			IF MEQUIP_PLAYER:(LOCAL:0):(LOCAL:1) == ARG:0
				RETURNF 1
			ENDIF
		NEXT
	ENDIF
NEXT
RETURNF 0

;-------------------------------------------------
;キャラARG:0がコマンド番号ARG:1～ARG:8に対応する継続状態のターゲットならば1を返す関数
;-------------------------------------------------
@IS_EQUIP_TARGET(ARG:0, ARG:1, ARG:2 = -1, ARG:3 = -1, ARG:4 = -1, ARG:5 = -1, ARG:6 = -1, ARG:7 = -1, ARG:8 = -1, ARG:9 = -1, ARG:10 = -1, ARG:11 = -1, ARG:12 = -1, ARG:13 = -1)
#FUNCTION
FOR LOCAL:0, 0, MEQUIP_NUM
	IF GROUPMATCH(MEQUIP:(LOCAL:0), ARG:1, ARG:2, ARG:3, ARG:4, ARG:5, ARG:6, ARG:7, ARG:8, ARG:9, ARG:10, ARG:11, ARG:12, ARG:13)
		FOR LOCAL:1, 0, MEQUIP_TARGET_NUM:(LOCAL:0)
			IF MEQUIP_TARGET:(LOCAL:0):(LOCAL:1) == ARG:0
				RETURNF 1
			ENDIF
		NEXT
	ENDIF
NEXT
RETURNF 0

;-------------------------------------------------
;ARG:0の値に応じて
;  -1→MPLYをプレイヤー、MTAR「以外」をターゲットとする
;  -2→MPLY「以外」をプレイヤー、MTARをターゲットとする
;  -3→MTARをプレイヤー、MPLY「以外」をターゲットとする
;  -4→MTAR「以外」をプレイヤー、MPLYをターゲットとする
;コマンド番号ARG:1～ARG:10に対応する継続状態があれば1を返す関数
;-------------------------------------------------
@IS_EQUIP_OTHERS(ARG:0, ARG:1, ARG:2 = -1, ARG:3 = -1, ARG:4 = -1, ARG:5 = -1, ARG:6 = -1, ARG:7 = -1, ARG:8 = -1, ARG:9 = -1, ARG:10 = -1, ARG:11 = -1, ARG:12 = -1, ARG:13 = -1)
#FUNCTION
FOR LOCAL:6, 1, 14
	IF ARG:(LOCAL:6) < 0
		RETURNF 0
	ENDIF
	IF ARG:0 == -1
		FOR LOCAL:0, 0, MEQUIP_NUM
			IF MEQUIP:(LOCAL:0) == ARG:(LOCAL:6)
				FOR LOCAL:1, 0, MEQUIP_PLAYER_NUM:(LOCAL:0)
					FOR LOCAL:2, 0, MPLY_NUM
						IF MEQUIP_PLAYER:(LOCAL:0):(LOCAL:1) == MPLY:(LOCAL:2)
							FOR LOCAL:3, 0, MEQUIP_TARGET_NUM:(LOCAL:0)
								FOR LOCAL:4, 0, MTAR_NUM
									;won't this just return 1 whenever MTAR_NUM >= 2?
                                    ;I think this is broken
                                    ;Right now the japs only use it for foam play, where >1 target is impossible
									IF MEQUIP_TARGET:(LOCAL:0):(LOCAL:3) != MTAR:(LOCAL:4)
										RETURNF 1
									ENDIF
								NEXT
							NEXT
						ENDIF
					NEXT
				NEXT
			ENDIF
		NEXT
	ELSEIF ARG:0 == -2
		FOR LOCAL:0, 0, MEQUIP_NUM
			IF MEQUIP:(LOCAL:0) == ARG:(LOCAL:6)
				FOR LOCAL:1, 0, MEQUIP_TARGET_NUM:(LOCAL:0)
					FOR LOCAL:2, 0, MTAR_NUM
						IF MEQUIP_TARGET:(LOCAL:0):(LOCAL:1) == MTAR:(LOCAL:2)
							FOR LOCAL:3, 0, MEQUIP_PLAYER_NUM:(LOCAL:0)
								FOR LOCAL:4, 0, MPLY_NUM
									IF MEQUIP_PLAYER:(LOCAL:0):(LOCAL:3) != MPLY:(LOCAL:4)
										RETURNF 1
									ENDIF
								NEXT
							NEXT
						ENDIF
					NEXT
				NEXT
			ENDIF
		NEXT
	ELSEIF ARG:0 == -3
		FOR LOCAL:0, 0, MEQUIP_NUM
			IF MEQUIP:(LOCAL:0) == ARG:(LOCAL:6)
				FOR LOCAL:1, 0, MEQUIP_PLAYER_NUM:(LOCAL:0)
					FOR LOCAL:2, 0, MTAR_NUM
						IF MEQUIP_PLAYER:(LOCAL:0):(LOCAL:1) == MTAR:(LOCAL:2)
							FOR LOCAL:3, 0, MEQUIP_TARGET_NUM:(LOCAL:0)
								FOR LOCAL:4, 0, MPLY_NUM
									IF MEQUIP_TARGET:(LOCAL:0):(LOCAL:3) != MPLY:(LOCAL:4)
										RETURNF 1
									ENDIF
								NEXT
							NEXT
						ENDIF
					NEXT
				NEXT
			ENDIF
		NEXT
	ELSEIF ARG:0 == -4
		FOR LOCAL:0, 0, MEQUIP_NUM
			IF MEQUIP:(LOCAL:0) == ARG:(LOCAL:6)
				FOR LOCAL:1, 0, MEQUIP_TARGET_NUM:(LOCAL:0)
					FOR LOCAL:2, 0, MPLY_NUM
						IF MEQUIP_TARGET:(LOCAL:0):(LOCAL:1) == MPLY:(LOCAL:2)
							FOR LOCAL:3, 0, MEQUIP_PLAYER_NUM:(LOCAL:0)
								FOR LOCAL:4, 0, MTAR_NUM
									IF MEQUIP_PLAYER:(LOCAL:0):(LOCAL:3) != MTAR:(LOCAL:4)
										RETURNF 1
									ENDIF
								NEXT
							NEXT
						ENDIF
					NEXT
				NEXT
			ENDIF
		NEXT
	ELSE
		RETURNF 0
	ENDIF
NEXT
RETURNF 0

;-------------------------------------------------
;MEQUIPのコマンド番号がARG:0、プレイヤーがARG:1、ターゲットがARG:2の継続状態を検索し、存在すればMEQUIP番号を返す
;存在しない場合は-1を返す
;プレイヤー・ターゲットに-1を指定すると、そのプレイヤー・ターゲット指定を無視して探索
;-------------------------------------------------
@SEARCH_EQUIP(ARG:0, ARG:1, ARG:2)
#FUNCTION
FOR LOCAL:0, 0, MEQUIP_NUM
	IF MEQUIP:(LOCAL:0) == ARG:0
		FOR LOCAL:1, 0, MEQUIP_PLAYER_NUM:(LOCAL:0)
			IF MEQUIP_PLAYER:(LOCAL:0):(LOCAL:1) == ARG:1 || ARG:1 == -1
				FOR LOCAL:2, 0, MEQUIP_TARGET_NUM:(LOCAL:0)
					IF MEQUIP_TARGET:(LOCAL:0):(LOCAL:2) == ARG:2 || ARG:2 == -1
						RETURNF LOCAL:0
					ENDIF
				NEXT
				BREAK
			ENDIF
		NEXT
	ENDIF
NEXT
RETURNF -1


;-------------------------------------------------
;as above, with multiple optional arguments
;Arguments: Character 1, Character 2, action1, action2...
;-------------------------------------------------
@SEARCH_EQUIP_M(ARG:0, ARG:1, ARG:2, ARG:3 = -1, ARG:4 = -1, ARG:5 = -1, ARG:6 = -1, ARG:7 = -1, ARG:8 = -1, ARG:9 = -1, ARG:10 = -1, ARG:11 = -1, ARG:12 = -1, ARG:13 = -1)
#FUNCTION
FOR LOCAL:0, 0, MEQUIP_NUM
	IF GROUPMATCH(MEQUIP:(LOCAL:0), ARG:2, ARG:3, ARG:4, ARG:5, ARG:6, ARG:7, ARG:8, ARG:9, ARG:10, ARG:11, ARG:12, ARG:13)
		FOR LOCAL:1, 0, MEQUIP_PLAYER_NUM:(LOCAL:0)
			IF MEQUIP_PLAYER:(LOCAL:0):(LOCAL:1) == ARG:0 || ARG:0 == -1
				FOR LOCAL:2, 0, MEQUIP_TARGET_NUM:(LOCAL:0)
					IF MEQUIP_TARGET:(LOCAL:0):(LOCAL:2) == ARG:1 || ARG:1 == -1
						RETURNF LOCAL:0
					ENDIF
				NEXT
				BREAK
			ENDIF
		NEXT
	ENDIF
NEXT
RETURNF -1

;-------------------------------------------------
;MEQUIPのコマンド番号がARG:0、プレイヤー・ターゲットがARG:1・ARG:2の継続状態を検索し、存在すればMEQUIP番号を返す
;存在しない場合は-1を返す
;SEARCH_EQUIPと違い、ARG:1とARG:2が可換(いずれか片方がプレイヤー、片方がターゲットなら条件を満たす)
;-------------------------------------------------
@SEARCH_EQUIP_IC(ARG:0, ARG:1, ARG:2)
#FUNCTION
FOR LOCAL:0, 0, MEQUIP_NUM
	IF MEQUIP:(LOCAL:0) == ARG:0
		FOR LOCAL:1, 0, MEQUIP_PLAYER_NUM:(LOCAL:0)
			IF MEQUIP_PLAYER:(LOCAL:0):(LOCAL:1) == ARG:1 || ARG:1 == -1
				FOR LOCAL:2, 0, MEQUIP_TARGET_NUM:(LOCAL:0)
					IF MEQUIP_TARGET:(LOCAL:0):(LOCAL:2) == ARG:2 || ARG:2 == -1
						RETURNF LOCAL:0
					ENDIF
				NEXT
				BREAK
			ENDIF
			IF MEQUIP_PLAYER:(LOCAL:0):(LOCAL:1) == ARG:2 || ARG:2 == -1
				FOR LOCAL:2, 0, MEQUIP_TARGET_NUM:(LOCAL:0)
					IF MEQUIP_TARGET:(LOCAL:0):(LOCAL:2) == ARG:1 || ARG:1 == -1
						RETURNF LOCAL:0
					ENDIF
				NEXT
				BREAK
			ENDIF
		NEXT
	ENDIF
NEXT
RETURNF -1

;-------------------------------------------------
;as above but with multiple command arguments
;Arguments: Character 1, Character 2, action1, action2...
;-------------------------------------------------
@SEARCH_EQUIP_IC_M(ARG:0, ARG:1, ARG:2, ARG:3 = -1, ARG:4 = -1, ARG:5 = -1, ARG:6 = -1, ARG:7 = -1, ARG:8 = -1, ARG:9 = -1, ARG:10 = -1, ARG:11 = -1, ARG:12 = -1, ARG:13 = -1)
#FUNCTION
FOR LOCAL:0, 0, MEQUIP_NUM
	IF GROUPMATCH(MEQUIP:(LOCAL:0), ARG:2, ARG:3, ARG:4, ARG:5, ARG:6, ARG:7, ARG:8, ARG:9, ARG:10, ARG:11, ARG:12, ARG:13)
		FOR LOCAL:1, 0, MEQUIP_PLAYER_NUM:(LOCAL:0)
			IF MEQUIP_PLAYER:(LOCAL:0):(LOCAL:1) == ARG:0 || ARG:0 == -1
				FOR LOCAL:2, 0, MEQUIP_TARGET_NUM:(LOCAL:0)
					IF MEQUIP_TARGET:(LOCAL:0):(LOCAL:2) == ARG:1 || ARG:1 == -1
						RETURNF LOCAL:0
					ENDIF
				NEXT
				BREAK
			ENDIF
			IF MEQUIP_PLAYER:(LOCAL:0):(LOCAL:1) == ARG:1 || ARG:1 == -1
				FOR LOCAL:2, 0, MEQUIP_TARGET_NUM:(LOCAL:0)
					IF MEQUIP_TARGET:(LOCAL:0):(LOCAL:2) == ARG:0 || ARG:0 == -1
						RETURNF LOCAL:0
					ENDIF
				NEXT
				BREAK
			ENDIF
		NEXT
	ENDIF
NEXT
RETURNF -1

;-------------------------------------------------
;MEQUIPのコマンド番号がARG:0、プレイヤー・ターゲットがARG:1・ARG:2の継続状態を検索し、存在すればMEQUIP番号を返す
;存在しない場合は-1を返す
;SEARCH_EQUIP_ICと違い、ARG:1とARG:2はプレイヤーでもターゲットでも良い(両方がプレイヤー／両方がターゲットでも条件を満たす)
;-------------------------------------------------
@SEARCH_EQUIP_EITHER(ARG:0, ARG:1, ARG:2)
#FUNCTION
FOR LOCAL:0, 0, MEQUIP_NUM
	IF MEQUIP:(LOCAL:0) == ARG:0
		FOR LOCAL:1, 0, MEQUIP_PLAYER_NUM:(LOCAL:0)
			IF MEQUIP_PLAYER:(LOCAL:0):(LOCAL:1) == ARG:1 || ARG:1 == -1
				FOR LOCAL:2, 0, MEQUIP_PLAYER_NUM:(LOCAL:0)
					IF MEQUIP_PLAYER:(LOCAL:0):(LOCAL:2) == ARG:2 || ARG:2 == -1
						RETURNF LOCAL:0
					ENDIF
				NEXT
				FOR LOCAL:2, 0, MEQUIP_TARGET_NUM:(LOCAL:0)
					IF MEQUIP_TARGET:(LOCAL:0):(LOCAL:2) == ARG:2
						RETURNF LOCAL:0
					ENDIF
				NEXT
				BREAK
			ENDIF
		NEXT
		FOR LOCAL:1, 0, MEQUIP_TARGET_NUM:(LOCAL:0)
			IF MEQUIP_TARGET:(LOCAL:0):(LOCAL:1) == ARG:1
				FOR LOCAL:2, 0, MEQUIP_PLAYER_NUM:(LOCAL:0)
					IF MEQUIP_PLAYER:(LOCAL:0):(LOCAL:2) == ARG:2 || ARG:2 == -1
						RETURNF LOCAL:0
					ENDIF
				NEXT
				FOR LOCAL:2, 0, MEQUIP_TARGET_NUM:(LOCAL:0)
					IF MEQUIP_TARGET:(LOCAL:0):(LOCAL:2) == ARG:2
						RETURNF LOCAL:0
					ENDIF
				NEXT
				BREAK
			ENDIF
		NEXT
	ENDIF
NEXT
RETURNF -1

;-------------------------------------------------
;キャラARG:0がARG:1番のMEQUIPのプレイヤーであるかどうかを返す関数
;-------------------------------------------------
@IS_MPLY_EQUIP(ARG:0, ARG:1)
#FUNCTION
IF ARG:1 >= 0 && ARG:1 < MAX_MEQUIP && MEQUIP:(ARG:1) >= 0
	FOR LOCAL:0, 0, MAX_MEQUIP_PLAYER
		IF MEQUIP_PLAYER:(ARG:1):(LOCAL:0) == ARG:0
			RETURNF 1
		ENDIF
	NEXT
ENDIF
RETURNF 0

;-------------------------------------------------
;キャラARG:0がARG:1番のMEQUIPのターゲットであるかどうかを返す関数
;-------------------------------------------------
@IS_MTAR_EQUIP(ARG:0, ARG:1)
#FUNCTION
IF ARG:1 >= 0 && ARG:1 < MAX_MEQUIP && MEQUIP:(ARG:1) >= 0
	FOR LOCAL:0, 0, MAX_MEQUIP_TARGET
		IF MEQUIP_TARGET:(ARG:1):(LOCAL:0) == ARG:0
			RETURNF 1
		ENDIF
	NEXT
ENDIF
RETURNF 0

;-------------------------------------------------
;ARG:0番のコマンドの継続状態を設定する関数
;ARG:1に1を指定すると強制的に継続させる
;Returns mequip position of added action or mequip position of already existing action. Or -1 on failure.
;-------------------------------------------------
@SET_EQUIP(ARG:0, ARG:1 = 0)
#DIM MEQUIP_NUM_TMP
;既にEQUIPの数が限界に達しているなら戻る
IF MEQUIP_NUM >= 50
	RETURN -1
ENDIF


;return if command not continuable
RESULT = 0
TRYCALLFORM COM_IS_EQUIP{ARG:0}
IF !RESULT && !ARG:1
	RETURN -1
ENDIF

;既に同じ継続状態が設定されていれば戻る
FOR LOCAL:0, 0, MEQUIP_NUM
	IF MEQUIP:(LOCAL:0) == ARG:0
		LOCAL:5 = 1
		FOR LOCAL:1, 0, MPLY_NUM
			;※MPLYもMEQUIP_PLAYERもキャラ番号の若い順に並んでいるはずなので、単純比較する
			IF MEQUIP_PLAYER:(LOCAL:0):(LOCAL:1) != MPLY:(LOCAL:1)
				LOCAL:5 = 0
				BREAK
			ENDIF
		NEXT
		IF LOCAL:5
			FOR LOCAL:1, 0, MTAR_NUM
				;※MTARもMEQUIP_TARGETもキャラ番号の若い順に並んでいるはずなので、単純比較する
				IF MEQUIP_TARGET:(LOCAL:0):(LOCAL:1) != MTAR:(LOCAL:1)
					LOCAL:5 = 0
					BREAK
				ENDIF
			NEXT
			IF LOCAL:5
				RETURN LOCAL:0
			ENDIF
		ENDIF
	ENDIF
NEXT

    ;PRINTFORML STARTING MEQUIP
    ;FOR LOCAL, 0, MEQUIP_NUM
    ;    PRINTFORML MEQUIP {MEQUIP:(LOCAL)}, PLY {MEQUIP_PLAYER:LOCAL:0} TAR {MEQUIP_TARGET:LOCAL:0}
    ;NEXT
    ;PRINTFORML ------------------------

    ;store MEQUIP data in temporary arrays
MEQUIP_NUM_TMP = MEQUIP_NUM
FOR LOCAL, 0, MEQUIP_NUM
        ;SIF MEQUIP:LOCAL != -1
        ;    PRINTFORML MEQUIP {MEQUIP:LOCAL} STORED AT TMP POSITION {LOCAL} WITH PLY {MEQUIP_PLAYER:LOCAL:0} TAR {MEQUIP_TARGET:LOCAL:0}
	MEQUIP_TMP:LOCAL = MEQUIP:LOCAL
	MEQUIP_PLAYER_NUM_TMP:LOCAL = MEQUIP_PLAYER_NUM:LOCAL
	MEQUIP_TARGET_NUM_TMP:LOCAL = MEQUIP_TARGET_NUM:LOCAL
	MEQUIP_INITIATIVE_TMP:LOCAL = MEQUIP_INITIATIVE:LOCAL
	MEQUIP_TURN_TMP:LOCAL = MEQUIP_TURN:LOCAL
NEXT
FOR LOCAL, 0, MEQUIP_NUM
	FOR LOCAL:1, 0, MEQUIP_PLAYER_NUM:LOCAL
		MEQUIP_PLAYER_TMP:LOCAL:(LOCAL:1) = MEQUIP_PLAYER:LOCAL:(LOCAL:1)
	NEXT
NEXT
FOR LOCAL, 0, MEQUIP_NUM
	FOR LOCAL:1, 0, MEQUIP_TARGET_NUM:LOCAL
		MEQUIP_TARGET_TMP:LOCAL:(LOCAL:1) = MEQUIP_TARGET:LOCAL:(LOCAL:1)
	NEXT
NEXT
    ;store MPLY, MTAR, MPLY_NUM, MTAR_NUM
FOR LOCAL, 0, MPLY_NUM
	MPLY_TMP:LOCAL = MPLY:LOCAL
NEXT
FOR LOCAL, 0, MTAR_NUM
	MTAR_TMP:LOCAL = MTAR:LOCAL
NEXT
MPLY_NUM_TMP = MPLY_NUM
MTAR_NUM_TMP = MTAR_NUM


    ;replace MEQUIP:0 with the currently selected action
MEQUIP:0 = ARG:0
MEQUIP_PLAYER_NUM:0 = MPLY_NUM
MEQUIP_TARGET_NUM:0 = MTAR_NUM
FOR LOCAL:1, 0, MPLY_NUM
	SIF IS_INITIATIVE(MPLY:(LOCAL:1))
		MEQUIP_INITIATIVE:0 = MPLY:(LOCAL:1)
	MEQUIP_PLAYER:0:(LOCAL:1) = MPLY:(LOCAL:1)
NEXT
FOR LOCAL:1, 0, MTAR_NUM
	SIF IS_INITIATIVE(MTAR:(LOCAL:1))
		MEQUIP_INITIATIVE:0 = MTAR:(LOCAL:1)
	MEQUIP_TARGET:0:(LOCAL:1) = MTAR:(LOCAL:1)
NEXT
MEQUIP_NUM = 1

    ;add the stored actions back to MEQUIP, if they are still possible
FOR LOCAL, 0, MIN(MEQUIP_NUM_TMP, MAX_MEQUIP-1)
	FOR LOCAL:1, 0, MEQUIP_PLAYER_NUM_TMP:LOCAL
		MPLY:(LOCAL:1) = MEQUIP_PLAYER_TMP:(LOCAL):(LOCAL:1)
	NEXT

	FOR LOCAL:1, 0, MEQUIP_TARGET_NUM_TMP:LOCAL
		MTAR:(LOCAL:1) = MEQUIP_TARGET_TMP:(LOCAL):(LOCAL:1)
	NEXT
	MPLY_NUM = MEQUIP_PLAYER_NUM_TMP:LOCAL
	MTAR_NUM = MEQUIP_TARGET_NUM_TMP:LOCAL
	IF MEQUIP_TMP:LOCAL != -1
		COM_ENABLE = 1
		FLAG:RECHECKING = 1
		RESULT = 0
		TRYCALLFORM COM_ABLE{MEQUIP_TMP:LOCAL}
		FLAG:RECHECKING = 0
		COM_ENABLE = 0
			;DEBUGPRINTFORML COMABLE for {MEQUIP_TMP:LOCAL} IS {RESULT} with MPLY:0 {MPLY:0} and MTAR:0 {MTAR:0} MPLYNUM {MPLY_NUM} MTARNUM {MTAR_NUM}
		IF RESULT
				;DEBUGPRINTFORML READDING {MEQUIP_TMP:LOCAL} to {MEQUIP_NUM} with PLY {MPLY:0} and TAR {MTAR:0}
			MEQUIP:(MEQUIP_NUM) = MEQUIP_TMP:LOCAL
			MEQUIP_INITIATIVE:MEQUIP_NUM = MEQUIP_INITIATIVE_TMP:LOCAL
			FOR LOCAL:1, 0, MPLY_NUM
				MEQUIP_PLAYER:(MEQUIP_NUM):(LOCAL:1) = MPLY:(LOCAL:1)
			NEXT

			FOR LOCAL:1, 0, MTAR_NUM
				MEQUIP_TARGET:(MEQUIP_NUM):(LOCAL:1) = MTAR:(LOCAL:1)
			NEXT
			MEQUIP_PLAYER_NUM:(MEQUIP_NUM) = MEQUIP_PLAYER_NUM_TMP:LOCAL
			MEQUIP_TARGET_NUM:(MEQUIP_NUM) = MEQUIP_TARGET_NUM_TMP:LOCAL
			MEQUIP_TURN:MEQUIP_NUM = MEQUIP_TURN_TMP:LOCAL
			MEQUIP_NUM ++
		ELSE
			CALL COLOR_PRINTL(@"※因为%TRAINNAME:(ARG:0)%的干渉、%TRAINNAME:(MEQUIP_TMP:LOCAL)%解除了※", カラー_選択不可)
		ENDIF
	ENDIF

NEXT

MPLY_NUM = MPLY_NUM_TMP
MTAR_NUM = MTAR_NUM_TMP
    ;restore mply and mtar
FOR LOCAL, 0, MPLY_NUM
	MPLY:LOCAL = MPLY_TMP:LOCAL
NEXT
FOR LOCAL, 0, MTAR_NUM
	MTAR:LOCAL = MTAR_TMP:LOCAL
NEXT

    ;PRINTFORML ------------------------
    ;PRINTFORML FINAL MEQUIP
    ;FOR LOCAL, 0, MEQUIP_NUM
    ;   PRINTFORML MEQUIP {MEQUIP:(LOCAL)}, PLY {MEQUIP_PLAYER:LOCAL:0} TAR {MEQUIP_TARGET:LOCAL:0}
    ;NEXT

	;Return mequip position of the action we just added
RETURN 0


;-------------------------------------------------
;EQUIP解除の処理  ARG:0=MEQUIPの配列番号 ARG:1=逆調教中の解除を許すかどうか ARG:2=メッセージを表示するかどうか
;解除が行われた場合1を返す
;-------------------------------------------------
@RELEASE_EQUIP(ARG:0, ARG:1 = 0, ARG:2 = 1)
;逆調教中でARG:1が0なら解除不能
IF GROUPMATCH(FLAG:調教モード, 4, 5, 7) && !ARG:1
	RETURN 0
ENDIF

IF ARG:0 >= 0 && ARG:0 < MEQUIP_NUM
	LOCAL:5 = MEQUIP:(ARG:0)
	LOCAL:6 = MEQUIP_PLAYER:(ARG:0):0

	IF ARG:2
		;コマンドごとの地の文表示
		TRYCALLFORM COM_TEXT_RELEASE_EQUIP{MEQUIP:(ARG:0)}(ARG:0)
	ENDIF

	;削除するMEQUIPの分、配列番号を詰める
	FOR LOCAL:0, ARG:0, MEQUIP_NUM - 1
		MEQUIP:(LOCAL:0) = MEQUIP:(LOCAL:0 + 1)
		MEQUIP_PLAYER_NUM:(LOCAL:0) = MEQUIP_PLAYER_NUM:(LOCAL:0 + 1)
		MEQUIP_TARGET_NUM:(LOCAL:0) = MEQUIP_TARGET_NUM:(LOCAL:0 + 1)
		MEQUIP_INITIATIVE:(LOCAL:0) = MEQUIP_INITIATIVE:(LOCAL:0 + 1)
		FOR LOCAL:1, 0, MAX_MEQUIP_PLAYER
			MEQUIP_PLAYER:(LOCAL:0):(LOCAL:1) = MEQUIP_PLAYER:(LOCAL:0 + 1):(LOCAL:1)
		NEXT
		FOR LOCAL:1, 0, MAX_MEQUIP_TARGET
			MEQUIP_TARGET:(LOCAL:0):(LOCAL:1) = MEQUIP_TARGET:(LOCAL:0 + 1):(LOCAL:1)
		NEXT
		MEQUIP_TURN:(LOCAL:0) = MEQUIP_TURN:(LOCAL:0 + 1)
	NEXT

	;最後尾のデータをクリア
	LOCAL:2 = MEQUIP_NUM - 1
	MEQUIP:(LOCAL:2) = -1
	MEQUIP_PLAYER_NUM:(LOCAL:2) = 0
	MEQUIP_TARGET_NUM:(LOCAL:2) = 0
	MEQUIP_INITIATIVE:(LOCAL:2) = -1
	FOR LOCAL:1, 0, MAX_MEQUIP_PLAYER
		MEQUIP_PLAYER:(LOCAL:2):(LOCAL:1) = -1
	NEXT
	FOR LOCAL:1, 0, MAX_MEQUIP_TARGET
		MEQUIP_TARGET:(LOCAL:2):(LOCAL:1) = -1
	NEXT
	MEQUIP_TURN:(LOCAL:2) = 0

	MEQUIP_NUM --

	RETURN 1
ENDIF

RETURN 0

;-------------------------------------------------
;EQUIP解除の処理  ARG:0=MEQUIPに対応するコマンド番号 ARG:1=プレイヤーのキャラ番号 ARG:2=ターゲットのキャラ番号
;プレイヤー・ターゲットに-1を指定すると、そのプレイヤー・ターゲット指定を無視して探索
;-------------------------------------------------
@RELEASE_EQUIP_EX(ARG:0, ARG:1, ARG:2)
FOR LOCAL:0, 0, MAX_MEQUIP
	CALL RELEASE_EQUIP(SEARCH_EQUIP(ARG:0, ARG:1, ARG:2), 1, 0)
	IF !RESULT
		BREAK
	ENDIF
NEXT

;-------------------------------------------------
;キャラARG:0が関わるEQUIPを全て解除する関数
;-------------------------------------------------
@RELEASE_ALL_EQUIP(ARG:0)
LOCAL:0 = 0
LOCAL:2 = MEQUIP_NUM
WHILE LOCAL:0 < LOCAL:2
	LOCAL:5 = 0
	FOR LOCAL:1, 0, MEQUIP_PLAYER_NUM:(LOCAL:0)
		IF MEQUIP_PLAYER:(LOCAL:0):(LOCAL:1) == ARG:0
			LOCAL:5 = 1
			BREAK
		ENDIF
	NEXT
	IF !LOCAL:5
		FOR LOCAL:1, 0, MEQUIP_TARGET_NUM:(LOCAL:0)
			IF MEQUIP_TARGET:(LOCAL:0):(LOCAL:1) == ARG:0
				LOCAL:5 = 1
				BREAK
			ENDIF
		NEXT
	ENDIF
	IF LOCAL:5
		CALL RELEASE_EQUIP(LOCAL:0, 1, 0)
		LOCAL:2 --
	ELSE
		LOCAL:0 ++
	ENDIF
WEND

;-------------------------------------------------
;キャラARG:0が気絶した時のEQUIP解除
;-------------------------------------------------
@DOWN_RELEASE_EQUIP(ARG:0)
LOCAL:0 = 0
LOCAL:2 = MEQUIP_NUM
WHILE LOCAL:0 < LOCAL:2
	LOCAL:5 = 0
	FOR LOCAL:1, 0, MEQUIP_PLAYER_NUM:(LOCAL:0)
		IF MEQUIP_PLAYER:(LOCAL:0):(LOCAL:1) == ARG:0
			IF !GROUPMATCH(MEQUIP:(LOCAL:0), 13, 34, 44, 61, 62, 63, 64, 67, 75, 85, 84, 112, 114)
				LOCAL:5 = 1
				BREAK
			ENDIF
		ENDIF
	NEXT
	IF LOCAL:5
		CALL RELEASE_EQUIP(LOCAL:0, 1, 0)
		LOCAL:2 --
	ELSE
		LOCAL:0 ++
	ENDIF
WEND

;-------------------------------------------------
;EQUIPを初期化する関数
;-------------------------------------------------
@INIT_EQUIP
VARSET MEQUIP, -1
MEQUIP_NUM = 0
VARSET MEQUIP_PLAYER, -1
VARSET MEQUIP_TARGET, -1
VARSET MEQUIP_INITIATIVE, -1
VARSET MEQUIP_PLAYER_NUM, 0
VARSET MEQUIP_TARGET_NUM, 0
VARSET MEQUIP_TURN, 0

;--------------------------------------------------------
;継続コマンドのプレイヤー名称を取得 ARG:0=MEQUIPの配列番号
;--------------------------------------------------------
@EQUIP_PLAYER_ANAME(ARG:0)
#FUNCTIONS
LOCALS:0 =
IF MEQUIP_PLAYER_NUM:(ARG:0) >= 3
	LOCALS:0 = %ANAME(MEQUIP_PLAYER:(ARG:0):0)%们
ELSEIF MEQUIP_PLAYER_NUM:(ARG:0) == 2
	LOCALS:0 = %ANAME(MEQUIP_PLAYER:(ARG:0):0)%和%ANAME(MEQUIP_PLAYER:(ARG:0):1)%
ELSEIF MEQUIP_PLAYER_NUM:(ARG:0) ==1
	LOCALS:0 = %ANAME(MEQUIP_PLAYER:(ARG:0):0)%
ENDIF
RETURNF LOCALS:0

;--------------------------------------------------------
;継続コマンドのターゲット名称を取得 ARG:0=MEQUIPの配列番号
;--------------------------------------------------------
@EQUIP_TARGET_ANAME(ARG:0)
#FUNCTIONS
LOCALS:0 =
IF MEQUIP_TARGET_NUM:(ARG:0) >= 3
	LOCALS:1 = %ANAME(MEQUIP_TARGET:(ARG:0):0)%们
ELSEIF MEQUIP_TARGET_NUM:(ARG:0) == 2
	LOCALS:1 = %ANAME(MEQUIP_TARGET:(ARG:0):0)%和%ANAME(MEQUIP_TARGET:(ARG:0):1)%
ELSEIF MEQUIP_TARGET_NUM:(ARG:0) == 1
	LOCALS:1 = %ANAME(MEQUIP_TARGET:(ARG:0):0)%
ENDIF
RETURNF LOCALS:1

;-------------------------------------------------
;キャラARG:0のソースを一時的に退避する関数
;-------------------------------------------------
@PUTOUT_SOURCE(ARG:0)
FOR LOCAL:0, 0, 100
	MEMORY_SOURCE:(ARG:0):(LOCAL:0) = SOURCE:(ARG:0):(LOCAL:0)
	SOURCE:(ARG:0):(LOCAL:0) = 0
NEXT

;-------------------------------------------------
;キャラARG:0の退避したソースを再び加算する関数
;-------------------------------------------------
@SUM_SOURCE(ARG:0)
FOR LOCAL:0, 0, 100
	SOURCE:(ARG:0):(LOCAL:0) += MEMORY_SOURCE:(ARG:0):(LOCAL:0)
	MEMORY_SOURCE:(ARG:0):(LOCAL:0) = 0
NEXT

;-------------------------------------------------
;キャラARG:0のＶが埋まっているかどうかを判定する関数
;-------------------------------------------------
@IS_V_HOLD(ARG:0)
#FUNCTION
;貝合わせ、双頭バイブ
SIF IS_EQUIP(ARG:0, 21, 22)
	RETURNF 1
;性交
SIF IS_EQUIP_TARGET(ARG:0, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39)
	RETURNF 1
SIF IS_EQUIP_TARGET(ARG:0, 52, 55, 57, 160)
	RETURNF 1
;指挿入、尻尾挿入, バイブ、拡張バルーン、フィスト, 触手挿入
SIF IS_EQUIP_TARGET(ARG:0, 3, 6, 61, 65, 87, 101, 201, 108)
	RETURNF 1
;顔面騎乗, V Self-insert
SIF IS_EQUIP_PLAYER(ARG:0, 101, 108)
	RETURNF 1
RETURNF 0

;-------------------------------------------------
;キャラARG:0のＡが埋まっているかどうかを判定する関数
;-------------------------------------------------
@IS_A_HOLD(ARG:0)
#FUNCTION
;Ａ性交
SIF IS_EQUIP_TARGET(ARG:0, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49) || IS_EQUIP_TARGET(ARG:0, 53, 56, 58, 161)
	RETURNF 1

;アナル愛撫、尻尾Ａ挿入、アナル舐め, 尻尾、Ａバイブ、拡張バルーン、Ａフィスト、浣腸＆プラグ, 触手Ａ挿入
SIF IS_EQUIP_TARGET(ARG:0, 4, 7, 8, 62, 66, 88, 142, 202)
	RETURNF 1

;Ａ顔面騎乗、Ｗ顔面騎乗, 尻尾セルフA
SIF IS_EQUIP_PLAYER(ARG:0, 102, 105, 109)
	RETURNF 1
RETURNF 0

;-------------------------------------------------
;キャラARG:0の口が埋まっているかどうかを判定する関数
;-------------------------------------------------
@IS_M_HOLD(ARG:0)
#FUNCTION
;kissing
SIF IS_EQUIP(ARG:0, 20, 342)
	RETURNF 1
;cunnilingus, rimjob, nipple suck, blowjob, ball licking, footlicking, glans bj, autofellatio, 指フェラ
SIF IS_EQUIP_PLAYER(ARG:0, 2, 8, 9, 11, 19, 104, 107, 117, 24)
	RETURNF 1
;strapon-gag, gag, facefuck, tentacle m fuck, facesitting,
SIF IS_EQUIP_TARGET(ARG:0, 68, 86, 90, 210, 101, 102, 105)
	RETURNF 1
RETURNF 0

;-------------------------------------------------
;キャラARG:0のペニスが埋まっているか判断する関数
;性交は取得しないので注意！
;-------------------------------------------------
@IS_P_HOLD(ARG:0)
#FUNCTION
;手コキ、フェラ、パイズリ、素股、脚コキ、オナホ、尻尾、髪, 亀頭責め、電気あんま、触手オナホ
IF IS_EQUIP_TARGET(ARG:0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 106, 107, 103, 205) || IS_EQUIP_TARGET(ARG:0, 206)
	RETURNF 1
ENDIF
;イラマ、セルフオナホ、セルフフェラ、ニプルファック
IF IS_EQUIP_PLAYER(ARG:0, 90, 108, 109, 116, 117, 25)
	RETURNF 1
ENDIF
SIF IS_INSERT_SINGLE(MPLY:0, "Ｐ")
	RETURNF 1
RETURNF 0

;-------------------------------------------------
;Returns whether ARG:0's nipples are occupied
;-------------------------------------------------
@IS_N_HOLD(ARG:0)
#FUNCTION
;nipple sucking, nipple caps, milker, tentacle milking, tentacle mammary insertion, ニプルファック
IF IS_EQUIP_TARGET(ARG:0, 9, 64, 67, 207, 214, 25)
	RETURNF 1
ENDIF
RETURNF 0

;-------------------------------------------------
;キャラARG:0の尿道が埋まっているか判断する関数
;-------------------------------------------------
@IS_U_HOLD(ARG:0)
#FUNCTION
;尿道カテーテル,指挿入,尿道挿入、
IF IS_EQUIP_TARGET(ARG:0, 170, 171, 172, 215)
	RETURNF 1
ENDIF
RETURNF 0

;-------------------------------------------------
;キャラARG:0が拘束状態にあるかどうかを判定する関数
;-------------------------------------------------
@IS_BIND(ARG:0)
#FUNCTION
;縄・触手緊縛
IF IS_EQUIP_TARGET(ARG:0, 85, 208)
	RETURNF 1
ENDIF
RETURNF 0

;-------------------------------------------------
;キャラARG:0が顔面騎乗中かどうかを判定する関数 ARG:1にターゲットを指定可能
;-------------------------------------------------
@IS_RIDE(ARG:0, ARG:1 = -1)
#FUNCTION
IF ARG:1 < 0
	SIF IS_EQUIP_PLAYER(ARG:0, 101, 102, 105)
		RETURNF 1
ELSE
	SIF SEARCH_EQUIP_M(ARG:0, ARG:1, 101, 102, 105) >= 0
		RETURNF 1
ENDIF
RETURNF 0

;-------------------------------------------------
;キャラARG:0が顔面騎乗されているかどうかを判定する関数 ARG:1にプレイヤーを指定可能
;-------------------------------------------------
@IS_RIDDEN(ARG:0, ARG:1 = -1)
#FUNCTION
IF ARG:1 < 0
	SIF IS_EQUIP_TARGET(ARG:0, 101, 102, 105)
		RETURNF 1
ELSE
	SIF SEARCH_EQUIP_M(ARG:1, ARG:0, 101, 102, 105) >= 0
		RETURNF 1
ENDIF
RETURNF 0

;--------------------------------------------------------
;対Ｐ奉仕系コマンドの継続フラグを解除する関数
;--------------------------------------------------------
@RELEASE_SERVE_P
FOR LOCAL:0, 0, MPLY_NUM
	FOR LOCAL:1, 0, MTAR_NUM
		CALL RELEASE_EQUIP_EX(10, MPLY:(LOCAL:0), MTAR:(LOCAL:1))
		CALL RELEASE_EQUIP_EX(11, MPLY:(LOCAL:0), MTAR:(LOCAL:1))
		CALL RELEASE_EQUIP_EX(12, MPLY:(LOCAL:0), MTAR:(LOCAL:1))
		CALL RELEASE_EQUIP_EX(13, MPLY:(LOCAL:0), MTAR:(LOCAL:1))
		CALL RELEASE_EQUIP_EX(14, MPLY:(LOCAL:0), MTAR:(LOCAL:1))
		CALL RELEASE_EQUIP_EX(15, MPLY:(LOCAL:0), MTAR:(LOCAL:1))
		CALL RELEASE_EQUIP_EX(16, MPLY:(LOCAL:0), MTAR:(LOCAL:1))
		CALL RELEASE_EQUIP_EX(17, MPLY:(LOCAL:0), MTAR:(LOCAL:1))
		CALL RELEASE_EQUIP_EX(18, MPLY:(LOCAL:0), MTAR:(LOCAL:1))
		CALL RELEASE_EQUIP_EX(91, MPLY:(LOCAL:0), MTAR:(LOCAL:1))
		CALL RELEASE_EQUIP_EX(94, MPLY:(LOCAL:0), MTAR:(LOCAL:1))
		CALL RELEASE_EQUIP_EX(103, MPLY:(LOCAL:0), MTAR:(LOCAL:1))
		CALL RELEASE_EQUIP_EX(106, MPLY:(LOCAL:0), MTAR:(LOCAL:1))
		CALL RELEASE_EQUIP_EX(107, MPLY:(LOCAL:0), MTAR:(LOCAL:1))
		CALL RELEASE_EQUIP_EX(108, MPLY:(LOCAL:0), MTAR:(LOCAL:1))
		CALL RELEASE_EQUIP_EX(109, MPLY:(LOCAL:0), MTAR:(LOCAL:1))
		CALL RELEASE_EQUIP_EX(90, MTAR:(LOCAL:0), MPLY:(LOCAL:1))
	NEXT
NEXT

;--------------------------------------------------------
;口上の互換性をとるための関数／口が塞がっているかどうかをチェックする
;--------------------------------------------------------
@IS_EQUIP_CONTINUE(ARG:0, ARGS:1)
#FUNCTION
IF ARGS:1 == "口装着"
	;口枷・イラマチオ
	IF IS_EQUIP_TARGET(ARG:0, 86) || IS_EQUIP_TARGET(ARG:0, 90)
	ENDIF
ENDIF

RETURNF 0

;-------------------------------------------------
;Returns 1 if ARG:0 and ARG:1 cannot face due to an ongoing action
;-------------------------------------------------
;@CANNOT_FACE(ARG:0, ARG:1)
;#FUNCTION
;assjob
;SIF SEARCH_EQUIP_IC(15, ARG:0, ARG:1) >= 0
;	RETURNF 1

;-------------------------------------------------
;Returns 1 if ARG:0 and ARG:1 are forced to face due to an ongoing action
;-------------------------------------------------
;@MUST_FACE(ARG:0, ARG:1)
;#FUNCTION
;facing away (giving assjob)
;RETURNF 0

;-------------------------------------------------
;Returns if ARG:0 is capable of reaching most of ARG:1's body with their hands
;-------------------------------------------------
@CAN_REACH_BODY(ARG:0, ARG:1)
#FUNCTION
;bound
SIF IS_BIND(ARG:0)
	RETURNF 0
;unconscious
SIF !IS_PLAYABLE(ARG:0)
	RETURNF 0
;grovelling
SIF IS_EQUIP_PLAYER(ARG:0, 110)
	RETURNF 0
;giving/receiving footjob, buttjob, tribbing, doubledildo, trampling, footlicking
SIF SEARCH_EQUIP_IC_M(ARG:0, ARG:1, 14, 15, 21, 22, 103, 104) >= 0
	RETURNF 0
;fucked from behind (target of doggy/sitting backwards/reverse cowgirl/standing behind)
SIF GROUPMATCH(GET_SEX_POSITION(ARG:1, ARG:0), 2, 4, 6, 11)
	RETURNF 0

RETURNF 1

;Returns if there is an ongoing action that has CAN_REACH_BODY as a requirement
;actions like bondage that don't require continual manual work are exempt
@REACHING_BODY(ARG:0, ARG:1)
#FUNCTION
;caress, breast caress, foam play, boobjob, onahole, choke
SIF (SEARCH_EQUIP_M(ARG:0, ARG:1, 0, 1, 5, 12, 16, 94) >= 0)
	RETURNF 1
RETURNF 0


;-------------------------------------------------
;Returns whether ARG:0 is capable of reaching ARG:1's groin with their hands
;-------------------------------------------------
@CAN_REACH_GROIN(ARG:0, ARG:1)
#FUNCTION
;limbs bound
SIF IS_BIND(ARG:0)
	RETURNF 0
;unconscious
SIF !IS_PLAYABLE(ARG:0)
	RETURNF 0
;grovelling
SIF IS_EQUIP_PLAYER(ARG:0, 110)
	RETURNF 0
;giving/receiving footjob or trampling
SIF SEARCH_EQUIP_IC_M(ARG:0, ARG:1, 14, 103) >= 0
	RETURNF 0
;fucked by target in doggy/sitting backwards/reverse standing positions
SIF GROUPMATCH(GET_SEX_POSITION(ARG:1, ARG:0), 2, 4, 11)
	RETURNF 0

RETURNF 1

;Returns if there is an ongoing action that had CAN_REACH_GROIN as a requirement
@REACHING_GROIN(ARG:0, ARG:1)
#FUNCTION
SIF (SEARCH_EQUIP_M(ARG:0, ARG:1, 3, 4, 10, 18, 87, 88, 106, 107) >= 0)
	RETURNF 1

RETURNF 0

;-------------------------------------------------
;Returns whether ARG:0 is capable of reaching ARG:1's groin with their mouth
;-------------------------------------------------
@CAN_LICK_GROIN(ARG:0, ARG:1, ARG:2 = 0)
#FUNCTION
;mouth occupied
SIF IS_M_HOLD(ARG:0)
	RETURNF 0

;unconscious
SIF !IS_PLAYABLE(ARG:0) && ARG:2 == 0
	RETURNF 0
;fucking each other
SIF IS_INSERT_MUTUAL(ARG:0, ARG:1)
	RETURNF 0
;both bound
SIF (IS_BIND(ARG:0) && IS_BIND(ARG:1))
	RETURNF 0
;target is riding someone else
SIF IS_RIDE(ARG:1) && !IS_RIDE(ARG:1, ARG:0)
	RETURNF 0
;giving/receiving scissoring, doubledildo, frotting, trampling, footlicking, footjob
SIF SEARCH_EQUIP_IC_M(ARG:0, ARG:1, 21, 22, 23, 103, 104, 14) >= 0
	RETURNF 0
;facing away (giving assjob)
SIF SEARCH_EQUIP(15, ARG:0, ARG:1) >= 0
	RETURNF 0
;target is fucked or fucking in sitting position
SIF IS_EQUIP_TARGET(ARG:1, 32, 42) || IS_EQUIP_PLAYER(ARG:1, 32, 42)
	RETURNF 0
;one participant grovelling, but not the other
SIF (IS_EQUIP_PLAYER(ARG:0, 110) + IS_EQUIP_PLAYER(ARG:1, 110)) == 1
	RETURNF 0

RETURNF 1

;Returns if there is an ongoing action that had CAN_LICK_GROIN as a requirement
@LICKING_GROIN(ARG:0, ARG:1)
#FUNCTION
;cunnilingus, BJ, rimjob, ball licking, facefuck, glans blowjob
SIF (SEARCH_EQUIP_M(ARG:0, ARG:1, 2, 11, 8, 19, 90, 107) >= 0)
	RETURNF 1

RETURNF 0

;-------------------------------------------------
;Returns whether ARG:0 is capable of reaching most of ARG:1's frontal body with their mouth
;-------------------------------------------------
@CAN_LICK_BODY(ARG:0, ARG:1)
#FUNCTION
;mouth occupied
SIF IS_M_HOLD(ARG:0)
	RETURNF 0
;unconscious
SIF !IS_PLAYABLE(ARG:0)
	RETURNF 0
;both bound
SIF (IS_BIND(ARG:0) && IS_BIND(ARG:1))
	RETURNF 0
;player is ridden
SIF IS_RIDDEN(ARG:0)
	RETURNF 0
;not facing - fucking or fucked from behind by target (doggy/sitting backwards/reverse cowgirl/standing behind)
SIF GROUPMATCH(GET_SEX_POSITION(ARG:1, ARG:0), 2, 4, 6, 11) || GROUPMATCH(GET_SEX_POSITION(ARG:0, ARG:1), 2, 4, 6, 11)
	RETURNF 0

;giving/receiving tribadism, doubleidlo, assjob, trampling, footlicking, footjob)
SIF SEARCH_EQUIP_IC_M(ARG:0, ARG:1, 21, 22, 15, 103, 104, 14) >= 0
	RETURNF 0

;one participant grovelling, but not the other
SIF (IS_EQUIP_PLAYER(ARG:0, 110) + IS_EQUIP_PLAYER(ARG:1, 110)) == 1
	RETURNF 0

RETURNF 1

;Returns if there is an ongoing action that had CAN_LICK_BODY as a requirement
@LICKING_BODY(ARG:0, ARG:1)
#FUNCTION
;nipple sucking, kissing
SIF (SEARCH_EQUIP_M(ARG:0, ARG:1, 9) >= 0)
	RETURNF 1
RETURNF 0

;Returns whether a penis action can be stacked on those already ongoing
;Args: Player, target, action. ARG:0 is rarely important.
@P_STACKABLE(ARG:0, ARG:1, ARG:2)
#FUNCTION
LOCAL:1 = 0

;Existing action requires whole thing - blowjob trample, buttjob, frotting, sex
;Sex+tailjob is allowed
SIF IS_EQUIP_TARGET(ARG:1, 11, 103, 15) || IS_EQUIP(ARG:1, 23, 25) || (IS_INSERT_SINGLE(ARG:1, "Ｐ") && (!GROUPMATCH(ARG:2, GETNUM(TRAINNAME, "手コキ"), GETNUM(TRAINNAME, "尻尾コキ"))))
	RETURNF 0

;Weird special case: handjobs can be overlapped on top of a tentacle onahole
SIF IS_EQUIP_TARGET(ARG:1, 205) && !IS_EQUIP_TARGET(ARG:1, 10) && (ARG:2 == 10)
	RETURNF 1

;Tip in use - glans handjob, glans blowjob, facefuck, self-suck
SIF IS_EQUIP_TARGET(ARG:1, 106, 107) || IS_EQUIP_PLAYER(ARG:1, 117, 90)
	LOCAL:1 += 1

;Shaft in use - handjob, boobjob, footjob, onahole, tailjob, hairjob, T onahole, tentaclejob, onahole masturbation
;masturbation and Tmasturbation is a special case, it requires the shaft only if ARG:1 is solely male. This doesn't exactly match @COM. M and F masturbation ought to be different actions.
SIF IS_EQUIP_TARGET(ARG:1, 10, 12, 14, 16, 17, 18, 205, 206) || IS_EQUIP_PLAYER(ARG:1, 120, 116) || (IS_EQUIP_PLAYER(ARG:1, 120, 211) && !HAS_VAGINA(ARG:1))
	LOCAL:1 += 2

;tip+shaft used
SIF LOCAL:1 == 3
	RETURNF 0

;part already used, and command requires whole thing
SIF LOCAL:1 && ((ARG:2 >= 30 && ARG:2 <= 49) || GROUPMATCH(ARG:2, 52, 53, 55, 56, 57, 58, 160, 161) || GROUPMATCH(ARG:2, 11, 15, 23, 103))
	RETURNF 0

;shaft already used, and command requires shaft
SIF (LOCAL:1 == 2) && GROUPMATCH(ARG:2, 10, 12, 14, 16, 17, 18, 120, 211, 205, 206, 116)
	RETURNF 0

;tip already used, and command requires tip
SIF (LOCAL:1 == 1) && GROUPMATCH(ARG:2, 90, 106, 107, 117)
	RETURNF 0

RETURNF 1

;returns whether ARG0 can fuck ARG1.
@CAN_FUCK(ARG:0, ARG:1, ARG:2)
#FUNCTION

;player needs penis/strapon
SIF !HAS_PENIS(ARG:0) && !IS_EQUIP_PLAYER((ARG:0), 50)
	RETURNF 0

;unconscious/left
SIF !IS_PLAYABLE(ARG:0)
	RETURNF 0

;penis occupied
SIF IS_P_HOLD(ARG:0)
	RETURNF 0

;being fucked by target
SIF IS_INSERT_MUTUAL(ARG:0, ARG:1) > 0
	RETURNF 0

;action requires player mobility
IF !GROUPMATCH(ARG:2, 13, 21, 22, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 52, 53, 55, 56, 57, 58, 160, 161, 172)
;player's limbs bound
	SIF IS_BIND(ARG:0)
		RETURNF 0
;player is ridden by anyone
	SIF IS_RIDDEN(ARG:0)
		RETURNF 0
ENDIF

;action requires target mobility
IF GROUPMATCH(ARG:2, 34, 35, 39, 44, 45, 49, 52, 53, 160, 161)
;target's limbs bound
	SIF IS_BIND(ARG:1)
		RETURNF 0
;target is ridden by anyone
	SIF IS_RIDDEN(ARG:1)
		RETURNF 0
ENDIF

;prostrate player
SIF IS_EQUIP_PLAYER(ARG:0, 110)
	RETURNF 0

;prostrate target, unless doggy
SIF IS_EQUIP_PLAYER(ARG:1, 110) && !GROUPMATCH(ARG:2, 31, 41, 172)
	RETURNF 0

;player or target is riding
SIF IS_RIDE(ARG:0) || IS_RIDE(ARG:1)
	RETURNF 0

;ridden by target
SIF IS_RIDDEN(ARG:0, ARG:1)
	RETURNF 0

;giving foam play to someone besides target
SIF IS_EQUIP_PLAYER(ARG:0, 5) && !(SEARCH_EQUIP(5, ARG:0, ARG:1) >= 0)
	RETURNF 0
;giving (to target) or receiving (from target) Boobjob, Thighjob, Footjob, Buttjob, Hairjob, Facefuck, trample, Foot licking
SIF (SEARCH_EQUIP_IC_M(ARG:0, ARG:1, 12, 13, 14, 15, 18, 90, 103) >= 0)
	RETURNF 0

;receiving footlicking from target, unless reverse cowgirl
SIF (SEARCH_EQUIP(104, ARG:1, ARG:0) >= 0) && ARG:2 != 35 && ARG:2 != 45
	RETURNF 0

;giving footlicking to target, unless cowgirl or mating press
SIF (SEARCH_EQUIP(104, ARG:0, ARG:1) >= 0) && !GROUPMATCH(ARG:2, 34, 38, 44, 48)
	RETURNF 0

;target is getting a footjob, unless doggy, sitting backwards, cowgirl, reverse cowgirl
SIF (IS_EQUIP_TARGET(ARG:1, 14) && !GROUPMATCH(ARG:2, 31, 33, 34, 35, 41, 43, 44, 45, 172))
	RETURNF 0

;being fucked by a third party: tribadism, doubledildo, frotting
SIF IS_EQUIP(ARG:0, 21, 22, 23)
	RETURNF 0
;licking groin or having groin licked
SIF LICKING_GROIN(ARG:0, ARG:1) || LICKING_GROIN(ARG:1, ARG:0)
	RETURNF 0
RETURNF 1


;Returns 1 if an action is already happening with the exact same MPLYs and MTARs
@COM_ALREADY_HAPPENING(ARG:0)
#FUNCTION
#DIM Found
FOR LOCAL:0, 0, MEQUIP_NUM
	IF (MEQUIP:(LOCAL:0) == ARG:(0)) && (MEQUIP_PLAYER_NUM:(LOCAL:0) == MPLY_NUM) && (MEQUIP_TARGET_NUM:(LOCAL:0) == MTAR_NUM)
		FOR LOCAL:1, 0, MEQUIP_PLAYER_NUM:(LOCAL:0)
			Found = 0
			FOR LOCAL:2, 0, MPLY_NUM
				SIF MEQUIP_PLAYER:(LOCAL:0):(LOCAL:1) == MPLY:(LOCAL:2)
					Found = 1
			NEXT
			SIF !Found
				GOTO NO_MATCH
		NEXT
		FOR LOCAL:1, 0, MEQUIP_TARGET_NUM:(LOCAL:0)
			Found = 0
			FOR LOCAL:2, 0, MTAR_NUM
				SIF MEQUIP_TARGET:(LOCAL:0):(LOCAL:1) == MTAR:(LOCAL:2)
					Found = 1
			NEXT
			SIF !Found
				GOTO NO_MATCH
		NEXT
        ;all players and targets checked
		RETURNF 1
	ENDIF
	$NO_MATCH
NEXT

RETURNF 0


@SWAP_MEQUIP(ARG:0, ARG:1)
SWAP MEQUIP:(ARG:0), MEQUIP:(ARG:1)
FOR LOCAL, 0, MAX_MEQUIP_PLAYER
	SWAP MEQUIP_PLAYER:(ARG:0):(LOCAL), MEQUIP_PLAYER:(ARG:1):(LOCAL)
NEXT
FOR LOCAL, 0, MAX_MEQUIP_TARGET
	SWAP MEQUIP_TARGET:(ARG:0):(LOCAL), MEQUIP_TARGET:(ARG:1):(LOCAL)
NEXT
SWAP MEQUIP_PLAYER_NUM:(ARG:0), MEQUIP_PLAYER_NUM:(ARG:1)
SWAP MEQUIP_TARGET_NUM:(ARG:0), MEQUIP_TARGET_NUM:(ARG:1)
SWAP MEQUIP_INITIATIVE:(ARG:0), MEQUIP_INITIATIVE:(ARG:1)
SWAP MEQUIP_TURN:(ARG:0), MEQUIP_TURN:(ARG:1)
SWAP MEQUIP_CUT:(ARG:0), MEQUIP_CUT:(ARG:1)
